import time
import math

a= time.time()
p.<R0, R1, R1a, R1b, R1c, R2, R2a, R2b, R2c, R3, prob> = MixedIntegerLinearProgram (maximization=True, solver = "GLPK")
# Her bir Ã§evrimdeki aktiflik
p.set_binary (R0)
p.set_binary (R1)
p.set_binary (R1a)
p.set_binary (R1b)
p.set_binary (R1c)
p.set_binary (R2)
p.set_binary (R2a)
p.set_binary (R2b)
p.set_binary (R2c)
p.set_binary (R3)


pp1 = Polyhedron(vertices=[

[ 0,0,0,0,0,0,0,0,0,0 , 0.0 ],
[ 0,0,0,0,1,1,0,0,1,1 , 0.0 ],
[ 0,0,0,1,0,0,0,1,1,1 , 0.0 ],
[ 0,0,0,1,1,1,0,1,0,0 , -3.9068905956085187 ],
[ 0,0,0,1,1,1,0,1,1,1 , -0.0995356735509144 ],
[ 0,0,1,0,0,0,1,1,1,0 , 0.0 ],
[ 0,0,1,0,1,1,1,1,0,1 , -3.9068905956085187 ],
[ 0,0,1,0,1,1,1,1,1,1 , -0.0995356735509144 ],
[ 0,0,1,1,0,0,1,0,0,1 , -3.9068905956085187 ],
[ 0,0,1,1,1,1,1,0,1,0 , -7.813781191217037 ],
[ 0,0,1,1,1,1,1,0,1,1 , -4.006426269159433 ],
[ 0,0,1,1,0,0,1,1,1,1 , -0.0995356735509144 ],
[ 0,0,1,1,1,1,1,1,1,1 , -0.3059865510183408 ],
[ 0,0,1,1,1,1,1,1,1,0 , -4.006426269159433 ],
[ 0,0,1,1,1,1,1,1,0,1 , -4.006426269159433 ],
[ 0,1,0,0,0,1,1,1,0,0 , 0.0 ],
[ 0,1,0,0,1,0,1,1,1,1 , -3.9068905956085187 ],
[ 0,1,0,0,1,1,1,1,1,1 , -0.0995356735509144 ],
[ 0,1,0,1,0,1,1,0,1,1 , -3.9068905956085187 ],
[ 0,1,0,1,1,0,1,0,0,0 , -7.813781191217037 ],
[ 0,1,0,1,1,1,1,0,1,1 , -4.006426269159433 ],
[ 0,1,0,1,0,1,1,1,1,1 , -0.0995356735509144 ],
[ 0,1,0,1,1,0,1,1,1,1 , -4.006426269159433 ],
[ 0,1,0,1,1,1,1,1,0,0 , -4.006426269159433 ],
[ 0,1,0,1,1,1,1,1,1,1 , -0.3059865510183408 ],
[ 0,1,1,0,0,1,0,0,1,0 , -3.9068905956085187 ],
[ 0,1,1,0,1,0,0,0,0,1 , -7.813781191217037 ],
[ 0,1,1,0,1,1,0,0,1,1 , -4.006426269159433 ],
[ 0,1,1,1,0,1,0,1,0,1 , -7.813781191217037 ],
[ 0,1,1,1,1,0,0,1,1,0 , -11.720671786825555 ],
[ 0,1,1,1,1,1,0,1,1,1 , -4.21287714662686 ],
[ 0,1,1,1,0,1,0,1,1,1 , -4.006426269159433 ],
[ 0,1,1,1,1,0,0,1,1,1 , -7.9133168647679515 ],
[ 0,1,1,1,1,1,0,1,1,0 , -7.9133168647679515 ],
[ 0,1,1,1,1,1,0,1,0,1 , -7.9133168647679515 ],
[ 0,1,1,0,0,1,1,1,1,0 , -0.0995356735509144 ],
[ 0,1,1,0,1,0,1,1,1,1 , -4.006426269159433 ],
[ 0,1,1,0,1,1,1,1,0,1 , -4.006426269159433 ],
[ 0,1,1,0,1,1,1,1,1,1 , -0.3059865510183408 ],
[ 0,1,1,1,0,1,1,1,1,1 , -0.3059865510183408 ],
[ 0,1,1,1,1,0,1,1,1,0 , -7.9133168647679515 ],
[ 0,1,1,1,1,1,1,1,1,1 , -0.5039259286302499 ],
[ 0,1,1,1,1,1,1,1,0,1 , -4.21287714662686 ],
[ 0,1,1,1,0,1,1,1,0,1 , -4.006426269159433 ],
[ 0,1,1,1,1,0,1,1,1,1 , -4.21287714662686 ],
[ 0,1,1,1,1,1,1,1,1,0 , -4.21287714662686 ],
[ 0,1,1,1,0,1,1,0,1,1 , -4.006426269159433 ],
[ 0,1,1,1,1,0,1,0,0,1 , -7.9133168647679515 ],
[ 0,1,1,1,1,1,1,0,1,1 , -4.21287714662686 ],
[ 0,1,1,1,1,1,1,0,1,0 , -7.9133168647679515 ],
[ 1,0,0,0,0,1,1,0,0,1 , 0.0 ],
[ 1,0,0,0,1,0,1,0,1,0 , -3.9068905956085187 ],
[ 1,0,0,0,1,1,1,0,1,1 , -0.0995356735509144 ],
[ 1,0,0,1,0,1,1,1,1,0 , -3.9068905956085187 ],
[ 1,0,0,1,1,0,1,1,0,1 , -7.813781191217037 ],
[ 1,0,0,1,1,1,1,1,1,1 , -0.3059865510183408 ],
[ 1,0,0,1,0,1,1,1,1,1 , -0.0995356735509144 ],
[ 1,0,0,1,1,0,1,1,1,1 , -4.006426269159433 ],
[ 1,0,0,1,1,1,1,1,0,1 , -4.006426269159433 ],
[ 1,0,0,1,1,1,1,1,1,0 , -4.006426269159433 ],
[ 1,0,1,0,0,1,0,1,1,1 , -3.9068905956085187 ],
[ 1,0,1,0,1,0,0,1,0,0 , -7.813781191217037 ],
[ 1,0,1,0,1,1,0,1,1,1 , -4.006426269159433 ],
[ 1,0,1,1,0,1,0,0,0,0 , -7.813781191217037 ],
[ 1,0,1,1,1,0,0,0,1,1 , -11.720671786825555 ],
[ 1,0,1,1,1,1,0,0,1,1 , -7.9133168647679515 ],
[ 1,0,1,1,0,1,0,1,1,1 , -4.006426269159433 ],
[ 1,0,1,1,1,0,0,1,1,1 , -7.9133168647679515 ],
[ 1,0,1,1,1,1,0,1,1,1 , -4.21287714662686 ],
[ 1,0,1,1,1,1,0,1,0,0 , -7.9133168647679515 ],
[ 1,0,1,0,0,1,1,1,1,1 , -0.0995356735509144 ],
[ 1,0,1,0,1,0,1,1,1,0 , -4.006426269159433 ],
[ 1,0,1,0,1,1,1,1,0,1 , -4.006426269159433 ],
[ 1,0,1,0,1,1,1,1,1,1 , -0.3059865510183408 ],
[ 1,0,1,1,0,1,1,1,1,0 , -4.006426269159433 ],
[ 1,0,1,1,1,0,1,1,1,1 , -4.21287714662686 ],
[ 1,0,1,1,1,1,1,1,1,1 , -0.5039259286302499 ],
[ 1,0,1,1,1,1,1,1,0,1 , -4.21287714662686 ],
[ 1,0,1,1,0,1,1,0,0,1 , -4.006426269159433 ],
[ 1,0,1,1,1,0,1,0,1,1 , -7.9133168647679515 ],
[ 1,0,1,1,1,1,1,0,1,1 , -4.21287714662686 ],
[ 1,0,1,1,1,1,1,0,1,0 , -7.9133168647679515 ],
[ 1,0,1,1,0,1,1,1,1,1 , -0.3059865510183408 ],
[ 1,0,1,1,1,0,1,1,0,1 , -7.9133168647679515 ],
[ 1,0,1,1,1,1,1,1,1,0 , -4.21287714662686 ],
[ 1,1,0,0,0,0,0,1,0,1 , -3.9068905956085187 ],
[ 1,1,0,0,1,1,0,1,1,0 , -7.813781191217037 ],
[ 1,1,0,0,1,1,0,1,1,1 , -4.006426269159433 ],
[ 1,1,0,1,0,0,0,0,1,0 , -7.813781191217037 ],
[ 1,1,0,1,1,1,0,0,0,1 , -11.720671786825555 ],
[ 1,1,0,1,1,1,0,0,1,1 , -7.9133168647679515 ],
[ 1,1,0,1,0,0,0,1,1,1 , -4.006426269159433 ],
[ 1,1,0,1,1,1,0,1,1,1 , -4.21287714662686 ],
[ 1,1,0,1,1,1,0,1,0,1 , -7.9133168647679515 ],
[ 1,1,0,1,1,1,0,1,1,0 , -7.9133168647679515 ],
[ 1,1,1,0,0,0,1,0,1,1 , -7.813781191217037 ],
[ 1,1,1,0,1,1,1,0,0,0 , -11.720671786825555 ],
[ 1,1,1,0,1,1,1,0,1,1 , -4.21287714662686 ],
[ 1,1,1,1,0,0,1,1,0,0 , -11.720671786825555 ],
[ 1,1,1,1,1,1,1,1,1,1 , -0.45877276026000524 ],
[ 1,1,1,1,0,0,1,1,1,1 , -4.21287714662686 ],
[ 1,1,1,1,1,1,1,1,0,0 , -8.119767742235378 ],
[ 1,1,1,0,0,0,1,1,1,1 , -4.006426269159433 ],
[ 1,1,1,0,1,1,1,1,1,0 , -4.21287714662686 ],
[ 1,1,1,0,1,1,1,1,0,1 , -4.21287714662686 ],
[ 1,1,1,0,1,1,1,1,1,1 , -0.5039259286302499 ],
[ 1,1,1,1,0,0,1,1,1,0 , -7.9133168647679515 ],
[ 1,1,1,1,1,1,1,1,0,1 , -4.4108165242387685 ],
[ 1,1,1,1,0,0,1,1,0,1 , -7.9133168647679515 ],
[ 1,1,1,1,1,1,1,1,1,0 , -4.4108165242387685 ],
[ 1,1,1,1,0,0,1,0,1,1 , -7.9133168647679515 ],
[ 1,1,1,1,1,1,1,0,0,1 , -8.119767742235378 ],
[ 1,1,1,1,1,1,1,0,1,0 , -8.119767742235378 ],
[ 1,1,1,1,1,1,1,0,1,1 , -4.4108165242387685 ],
[ 1,1,0,0,0,1,1,1,0,1 , -0.0995356735509144 ],
[ 1,1,0,0,1,1,1,1,1,0 , -4.006426269159433 ],
[ 1,1,0,0,1,1,1,1,1,1 , -0.3059865510183408 ],
[ 1,1,0,0,1,0,1,1,1,1 , -4.006426269159433 ],
[ 1,1,0,1,0,1,1,1,1,0 , -4.006426269159433 ],
[ 1,1,0,1,1,1,1,1,0,1 , -4.21287714662686 ],
[ 1,1,0,1,1,1,1,1,1,1 , -0.5039259286302499 ],
[ 1,1,0,1,1,0,1,1,1,1 , -4.21287714662686 ],
[ 1,1,0,1,0,1,1,0,1,1 , -4.006426269159433 ],
[ 1,1,0,1,1,1,1,0,1,1 , -4.21287714662686 ],
[ 1,1,0,1,1,1,1,0,0,1 , -7.9133168647679515 ],
[ 1,1,0,1,1,0,1,0,1,0 , -7.9133168647679515 ],
[ 1,1,0,1,0,1,1,1,1,1 , -0.3059865510183408 ],
[ 1,1,0,1,1,1,1,1,1,0 , -4.21287714662686 ],
[ 1,1,0,1,1,0,1,1,0,1 , -7.9133168647679515 ],
[ 1,1,1,0,0,1,1,1,1,1 , -0.3059865510183408 ],
[ 1,1,1,0,1,1,1,1,0,0 , -7.9133168647679515 ],
[ 1,1,1,0,1,0,1,1,1,1 , -4.21287714662686 ],
[ 1,1,1,1,0,1,1,1,0,0 , -7.9133168647679515 ],
[ 1,1,1,1,1,0,1,1,1,1 , -4.4108165242387685 ],
[ 1,1,1,1,0,1,1,1,1,1 , -0.5039259286302499 ],
[ 1,1,1,1,1,0,1,1,0,0 , -11.82020746037647 ],
[ 1,1,1,1,0,1,1,0,1,1 , -4.21287714662686 ],
[ 1,1,1,1,1,1,1,0,0,0 , -11.82020746037647 ],
[ 1,1,1,1,1,0,1,0,1,1 , -8.119767742235378 ],
[ 1,1,1,0,0,1,1,0,1,1 , -4.006426269159433 ],
[ 1,1,1,0,1,1,1,0,1,0 , -7.9133168647679515 ],
[ 1,1,1,0,1,1,1,0,0,1 , -7.9133168647679515 ],
[ 1,1,1,0,1,0,1,0,1,1 , -7.9133168647679515 ],
[ 1,1,1,1,0,1,1,1,1,0 , -4.21287714662686 ],
[ 1,1,1,1,1,0,1,1,0,1 , -8.119767742235378 ],
[ 1,1,1,1,0,1,1,1,0,1 , -4.21287714662686 ],
[ 1,1,1,1,1,0,1,1,1,0 , -8.119767742235378 ],
[ 1,1,1,0,0,1,0,1,1,1 , -4.006426269159433 ],
[ 1,1,1,0,1,1,0,1,1,0 , -7.9133168647679515 ],
[ 1,1,1,0,1,1,0,1,1,1 , -4.21287714662686 ],
[ 1,1,1,0,1,0,0,1,0,1 , -7.9133168647679515 ],
[ 1,1,1,1,0,1,0,0,1,0 , -7.9133168647679515 ],
[ 1,1,1,1,1,1,0,0,1,1 , -8.119767742235378 ],
[ 1,1,1,1,1,1,0,0,0,1 , -11.82020746037647 ],
[ 1,1,1,1,1,0,0,0,1,1 , -11.82020746037647 ],
[ 1,1,1,1,0,1,0,1,1,1 , -4.21287714662686 ],
[ 1,1,1,1,1,1,0,1,0,1 , -8.119767742235378 ],
[ 1,1,1,1,1,1,0,1,1,1 , -4.4108165242387685 ],
[ 1,1,1,1,1,0,0,1,1,0 , -11.82020746037647 ],
[ 1,1,1,1,0,1,0,1,0,1 , -7.9133168647679515 ],
[ 1,1,1,1,1,1,0,1,1,0 , -8.119767742235378 ],
[ 1,1,1,1,1,0,0,1,1,1 , -8.119767742235378 ]

], base_ring=QQ)

hed1= pp1.Hrepresentation()

pp2 = Polyhedron(vertices=[

[0,0,0,1],
[1,0,1,1],
[0,1,1,1],
[1,1,1,1,-8.0 ],
[1,1,1,1,-0.005646563141142063 ]

], base_ring=QQ)

hed2= pp1.Hrepresentation()

def poly_map(p,var1list,var2list,prob):
    for h in hed1:
        u= list(h)
        p.add_constraint(
        u[1]*var1list[0] +
        u[2]*var1list[1] +
        u[3]*var1list[2] +
        u[4]*var1list[3] +
        u[5]*var1list[4] +
        u[6]*var2list[0] +
        u[7]*var2list[1] +
        u[8]*var2list[2] +
        u[9]*var2list[3] +
        u[10]*var2list[4] +
        u[11]*prob +
        u[0] >= 0 )
    
def xor_map(p,var1,var2,var3,prob):
    for h in hed2:
        u= list(h)
        p.add_constraint(
        u[1]*var1 +
        u[2]*var2 +
        u[3]*var3 +
        u[4]*prob +
        u[0] >= 0 )

    



# girdi non-zero sarti
p.add_constraint (p.sum (R1[i] for i in range (5)) + p.sum (R0[i] for i in range (5))  >= 1)

# round 1 
poly_map(p, [R1[i] for i in range(5)] , [R1a[i] for i in range(5)],prob[0])

poly_map(p, [R1a[i] for i in range(5)] , [R1b[i] for i in range(5)],prob[1])

poly_map(p, [R1b[i] for i in range(5)] , [R1c[i] for i in range(5)],prob[2])

for i in range(5):
    xor_map(p, R1c[i]  , R0[i] , R2[i] , prob[i+3])

p.add_constraint ( p.sum(R2[i] for i in range(5))* log(255,2.0) <= p.sum( prob[i] for i in range(8)))


# round 2 
poly_map(p, [R2[i] for i in range(5)] , [R2a[i] for i in range(5)],prob[8])

poly_map(p, [R2a[i] for i in range(5)] , [R2b[i] for i in range(5)],prob[9])

poly_map(p, [R2b[i] for i in range(5)] , [R2c[i] for i in range(5)],prob[10])

for i in range(5):
    xor_map(p, R2c[i] ,R1[i] ,R3[i] , prob[i+11] )

p.add_constraint ( p.sum(R3[i] for i in range(5))* log(255,2.0)  <= p.sum(prob[i] for i in range(8,15)))


#Toplam aktif
r1 = p.sum (prob[i] for i in range (0,8)) 
r2 = p.sum (prob[i] for i in range (8,11)) 


p.set_objective (p.sum ([r1, r2]))

#p.show()



print ("Min olasilik: ",p.solve())

print ("R1-R0      ",p.get_values (R1),p.get_values (R0))
print("")
print ("R1a-R1b-R1c",p.get_values (R1a),p.get_values (R1b),p.get_values (R1c))
print("")
print ("R2-R1      ",p.get_values (R2),p.get_values (R1))
print("")
print ("R2a-R2b-R2c",p.get_values (R2a),p.get_values (R2b),p.get_values (R2c))


b=time.time()

print("\n SÃ¼re: ",(b-a)/60)