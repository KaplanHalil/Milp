

# This file was *autogenerated* from the file beemilp.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_4 = Integer(4); _sage_const_3 = Integer(3); _sage_const_5 = Integer(5); _sage_const_6 = Integer(6); _sage_const_12 = Integer(12); _sage_const_18 = Integer(18); _sage_const_23 = Integer(23); _sage_const_24 = Integer(24); _sage_const_19 = Integer(19)
p = MixedIntegerLinearProgram (maximization=False, solver = "GLPK", names=('R0', 'R1', 'R1a', 'R1b', 'R1c', 'R2', 'R2a', 'R2b', 'R2c', 'R3', 'R3a', 'R3b', 'R3c', 'R4', 'd',)); (R0, R1, R1a, R1b, R1c, R2, R2a, R2b, R2c, R3, R3a, R3b, R3c, R4, d,) = p._first_ngens(15)
# Her bir Ã§evrimdeki aktiflik
p.set_binary (R1)
p.set_binary (R1a)
p.set_binary (R1b)
p.set_binary (R1c)
p.set_binary (R2)
p.set_binary (R2a)
p.set_binary (R2b)
p.set_binary (R2c)
p.set_binary (R3)
p.set_binary (R3a)
p.set_binary (R3b)
p.set_binary (R3c)
p.set_binary (R4)
p.set_binary (d)

def t_xor(p,in1,in2,in3,out,dummy):
        p.add_constraint(in1+in2+in3+out-_sage_const_2 *dummy >=_sage_const_0 )
        p.add_constraint(dummy- in1 >= _sage_const_0 )
        p.add_constraint(dummy- in2 >= _sage_const_0 )
        p.add_constraint(dummy- in3 >= _sage_const_0 )
        p.add_constraint(dummy- out >= _sage_const_0 )


def linear_map (p, var1list, var2list, dummyvar, branch_number):
    s = p.sum (var1list+var2list)
    p.add_constraint (s-branch_number*dummyvar >= _sage_const_0 )
    for i in var1list:
        p.add_constraint (dummyvar - i >=_sage_const_0 )
    for i in var2list:
        p.add_constraint (dummyvar - i >= _sage_const_0 )

def l_map(p,var1list, var2list, dummylist):
    t_xor(p, var1list[_sage_const_0 ], var1list[_sage_const_1 ], var1list[_sage_const_4 ],var2list[_sage_const_0 ],dummylist[_sage_const_0 ])
    t_xor(p, var1list[_sage_const_0 ], var1list[_sage_const_1 ],var1list[_sage_const_2 ],var2list[_sage_const_1 ],dummylist[_sage_const_1 ])
    t_xor(p, var1list[_sage_const_1 ], var1list[_sage_const_2 ],var1list[_sage_const_3 ],var2list[_sage_const_2 ],dummylist[_sage_const_2 ])
    t_xor(p, var1list[_sage_const_2 ], var1list[_sage_const_3 ],var1list[_sage_const_4 ],var2list[_sage_const_3 ],dummylist[_sage_const_3 ])
    t_xor(p, var1list[_sage_const_3 ], var1list[_sage_const_4 ],var1list[_sage_const_0 ],var2list[_sage_const_4 ],dummylist[_sage_const_4 ])
    p.add_constraint (p.sum (var1list)>= dummylist[_sage_const_5 ])
    p.add_constraint (p.sum (var2list)>= dummylist[_sage_const_5 ])
    p.add_constraint (p.sum (var1list)<= _sage_const_5 *dummylist[_sage_const_5 ])
    p.add_constraint (p.sum (var2list)<= _sage_const_5 *dummylist[_sage_const_5 ])
    
def xor(p,in1,in2,out,dummy):
    for i in range(len(in1)):
        p.add_constraint(in1[i]+in2[i]+out[i]-_sage_const_2 *dummy[i] >=_sage_const_0 )
        p.add_constraint(dummy[i]- in1[i] >= _sage_const_0 )
        p.add_constraint(dummy[i]- in2[i] >= _sage_const_0 )
        p.add_constraint(dummy[i]- out[i] >= _sage_const_0 )




# girdi non-zero sarti
p.add_constraint (p.sum (R1[i] for i in range (_sage_const_5 )) + p.sum (R0[i] for i in range (_sage_const_5 ))  >= _sage_const_1 )

d_idx=_sage_const_0 
# round 1 
l_map(p, [R1[i] for i in range(_sage_const_5 )] , [R1a[i] for i in range(_sage_const_5 )], [d[i] for i in range(d_idx,d_idx+_sage_const_6 )])

l_map(p, [R1a[i] for i in range(_sage_const_5 )] , [R1b[i] for i in range(_sage_const_5 )], [d[i] for i in range(d_idx+_sage_const_6 ,d_idx+_sage_const_12 )])

l_map(p, [R1b[i] for i in range(_sage_const_5 )] , [R1c[i] for i in range(_sage_const_5 )], [d[i] for i in range(d_idx+_sage_const_12 ,d_idx+_sage_const_18 )])

xor(p, [R1c[i] for i in range(_sage_const_5 )] , [R0[i] for i in range(_sage_const_5 )], [R2[i] for i in range(_sage_const_5 )], [d[i] for i in range(d_idx+_sage_const_18 ,d_idx+_sage_const_23 )])

d_idx=d_idx+_sage_const_24 

# round 2 
l_map(p, [R2[i] for i in range(_sage_const_5 )] , [R2a[i] for i in range(_sage_const_5 )], [d[i] for i in range(d_idx,d_idx+_sage_const_6 )])

l_map(p, [R2a[i] for i in range(_sage_const_5 )] , [R2b[i] for i in range(_sage_const_5 )], [d[i] for i in range(d_idx+_sage_const_6 ,d_idx+_sage_const_12 )])

l_map(p, [R2b[i] for i in range(_sage_const_5 )] , [R2c[i] for i in range(_sage_const_5 )], [d[i] for i in range(d_idx+_sage_const_12 ,d_idx+_sage_const_18 )])

xor(p, [R2c[i] for i in range(_sage_const_5 )] , [R1[i] for i in range(_sage_const_5 )], [R3[i] for i in range(_sage_const_5 )], [d[i] for i in range(d_idx+_sage_const_18 ,d_idx+_sage_const_23 )])

d_idx=d_idx+_sage_const_19 

# round 3 
l_map(p, [R3[i] for i in range(_sage_const_5 )] , [R3a[i] for i in range(_sage_const_5 )], [d[i] for i in range(d_idx,d_idx+_sage_const_6 )])

l_map(p, [R3a[i] for i in range(_sage_const_5 )] , [R3b[i] for i in range(_sage_const_5 )], [d[i] for i in range(d_idx+_sage_const_6 ,d_idx+_sage_const_12 )])

l_map(p, [R3b[i] for i in range(_sage_const_5 )] , [R3c[i] for i in range(_sage_const_5 )], [d[i] for i in range(d_idx+_sage_const_12 ,d_idx+_sage_const_18 )])

xor(p, [R3c[i] for i in range(_sage_const_5 )] , [R2[i] for i in range(_sage_const_5 )], [R4[i] for i in range(_sage_const_5 )], [d[i] for i in range(d_idx+_sage_const_18 ,d_idx+_sage_const_23 )])

#Toplam aktif
r1 = p.sum (R1[i] for i in range (_sage_const_5 )) 
r2 = p.sum (R1a[i] for i in range (_sage_const_5 )) 
r3 = p.sum (R1b[i] for i in range (_sage_const_5 ))
r4 = p.sum (R1c[i] for i in range (_sage_const_5 ))
r5 = p.sum (R2[i] for i in range (_sage_const_5 ))
r6 = p.sum (R2a[i] for i in range (_sage_const_5 ))
r7 = p.sum (R2b[i] for i in range (_sage_const_5 ))
r8 = p.sum (R2c[i] for i in range (_sage_const_5 ))
r9 = p.sum (R3[i] for i in range (_sage_const_5 ))
r10 = p.sum (R3a[i] for i in range (_sage_const_5 ))
r11 = p.sum (R3b[i] for i in range (_sage_const_5 ))
r12 = p.sum (R3c[i] for i in range (_sage_const_5 ))
p.set_objective (p.sum ([r1, r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12]))

#p.show()

print ("Toplam aktif s-kutusu: ",p.solve())

print ("R1-R0      ",p.get_values (R1),p.get_values (R0))
print("")
print ("R1a-R1b-R1c",p.get_values (R1a),p.get_values (R1b),p.get_values (R1c))
print("")
print ("R2-R1      ",p.get_values (R2),p.get_values (R1))
print("")
print ("R2a-R2b-R2c",p.get_values (R2a),p.get_values (R2b),p.get_values (R2c))
print("")
print ("R3-R2      ",p.get_values (R3),p.get_values (R2))
print("")
print ("R3a-R3b-R3c",p.get_values (R3a),p.get_values (R3b),p.get_values (R3c))
print("")
print ("R4-R3      ",p.get_values (R4),p.get_values (R3))



